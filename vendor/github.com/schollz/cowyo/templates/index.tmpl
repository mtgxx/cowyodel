<!DOCTYPE html>
<html>

    <head>
        <meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="apple-touch-icon" sizes="57x57" href=/static/img/cowyo/apple-icon-57x57.png>
        <link rel="apple-touch-icon" sizes="60x60" href=/static/img/cowyo/img/cowyo/apple-icon-60x60.png>
        <link rel="apple-touch-icon" sizes="72x72" href=/static/img/cowyo/apple-icon-72x72.png>
        <link rel="apple-touch-icon" sizes="76x76" href=/static/img/cowyo/apple-icon-76x76.png>
        <link rel="apple-touch-icon" sizes="114x114" href=/static/img/cowyo/apple-icon-114x114.png>
        <link rel="apple-touch-icon" sizes="120x120" href=/static/img/cowyo/apple-icon-120x120.png>
        <link rel="apple-touch-icon" sizes="144x144" href=/static/img/cowyo/apple-icon-144x144.png>
        <link rel="apple-touch-icon" sizes="152x152" href=/static/img/cowyo/apple-icon-152x152.png>
        <link rel="apple-touch-icon" sizes="180x180" href=/static/img/cowyo/apple-icon-180x180.png>
        <link rel="icon" type="image/png" sizes="192x192" href=/static/img/cowyo/android-icon-192x192.png>
        <link rel="icon" type="image/png" sizes="32x32" href=/static/img/cowyo/favicon-32x32.png>
        <link rel="icon" type="image/png" sizes="96x96" href=/static/img/cowyo/favicon-96x96.png>
        <link rel="icon" type="image/png" sizes="16x16" href=/static/img/cowyo/favicon-16x16.png>
        <link rel="manifest" href=/static/img/cowyo/manifest.json>
        <meta name="msapplication-TileColor" content="#fff">
        <meta name="msapplication-TileImage" content="/ms-icon-144x144.png">
        <meta name="theme-color" content="#fff">

        <script type="text/javascript" src="/static/js/jquery-1.8.3.js"></script>
        <link rel="stylesheet" type="text/css" href="/static/css/github-markdown.css">
        <link rel="stylesheet" type="text/css" href="/static/css/menus-min.css">
        <link rel="stylesheet" type="text/css" href="/static/css/base-min.css">
        <link rel="stylesheet" href="/static/css/highlight.css">
        <script src="/static/js/highlight.min.js"></script>
        <script type="text/javascript" src="/static/js/highlight.pack.js"></script>

        <style type="text/css">
{{ if .ListPage }}
/* Required for lists */
span { cursor: pointer; }
{{ end }}
body {
    background: #fff;
}
.success {
    color: #5cb85c;
    font-weight: bold;
}
.failure {
    color: #d9534f;
    font-weight: bold;
}
.pure-menu a {
    color: #777;
}
#wrap {
    position: absolute;
    top: 50px;
    left: 0px;
    right: 0px;
    bottom: 0px;
}
#pad {
    height:100%;
}
{{ if .EditPage }}
body {
    overflow:hidden;
}
{{ end  }}
body#pad textarea {
    width: 100%;
    height: 100%;
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    top: 0;
    border: 0;
    border: none;
    outline: none;
    -webkit-box-shadow: none;
    -moz-box-shadow: none;
    box-shadow: none;
    resize: none;
    font-size: 1.0em;
    {{ if .HasDotInName }}
    font-family: "Lucida Console", Monaco, monospace;
    {{else}}
    font-family: 'Open Sans','Segoe UI',Tahoma,Arial,sans-serif;
    {{ end }}
}

.markdown-body ul, .markdown-body ol {
    padding-left: 0em;
}

@media (min-width: 5em) {
    div#menu, div#rendered, body#pad textarea {
        padding-left: 2%;
        padding-right: 2%;
    }
    .pure-menu .pure-menu-horizontal {
        max-width: 300px;
    }
    .pure-menu-disabled, .pure-menu-heading, .pure-menu-link {
        padding-left:1.2em;
        padding-right:em;
    }
}
@media (min-width: 50em) {
    div#menu, div#rendered, body#pad textarea {
        padding-left: 10%;
        padding-right: 10%;
    }
    .pure-menu-disabled, .pure-menu-heading, .pure-menu-link {
        padding: .5em 1em;
    }
}
@media (min-width: 70em) {
    div#menu, div#rendered, body#pad textarea {
        padding-left: 15%;
        padding-right: 15%;
    }
}

@media (min-width: 100em) {
    div#menu, div#rendered, body#pad textarea {
        padding-left: 20%;
        padding-right: 20%;
    }
}

        </style>

        <title>{{ .Page }}</title>







        <script type='text/javascript'>
	    oulipo = false; 
            //<![CDATA[
            $(window).load(function() {
                // Returns a function, that, as long as it continues to be invoked, will not
                // be triggered. The function will be called after it stops being called for
                // N milliseconds. If `immediate` is passed, trigger the function on the
                // leading edge, instead of the trailing.
                function debounce(func, wait, immediate) {
                    var timeout;
                    return function() {
                        $('#saveEditButton').removeClass()
                        $('#saveEditButton').text("Editing");
                        var context = this,
                            args = arguments;
                        var later = function() {
                            timeout = null;
                            if (!immediate) func.apply(context, args);
                        };
                        var callNow = immediate && !timeout;
                        clearTimeout(timeout);
                        timeout = setTimeout(later, wait);
                        if (callNow) func.apply(context, args);
                    };
                };

                // This will apply the debounce effect on the keyup event
                // And it only fires 500ms or half a second after the user stopped typing
                $('#userInput').on('keyup', debounce(function() {
                    console.log('typing occurred');
		    if (oulipo == true) { $('#userInput').val($('#userInput').val().replace(/e/g,"")); }
                    $('#saveEditButton').removeClass()
                    $('#saveEditButton').text("Saving")
                    upload();
                }, 500));

                function upload() {
                    $.ajax({
                        type: 'POST',
                        url: '/update',
                        data: JSON.stringify({
                            new_text: $('#userInput').val(),
                            page: "{{ .Page }}"
                        }),
                        success: function(data) {
                            $('#saveEditButton').removeClass()
                            if (data.success == true) {
                                $('#saveEditButton').addClass("success");
                            } else {
                                $('#saveEditButton').addClass("failure");
                            }
                            $('#saveEditButton').text(data.message);
                        },
                        error: function(xhr, error) {
                            $('#saveEditButton').removeClass()
                            $('#saveEditButton').addClass("failure");
                            $('#saveEditButton').text(error);
                        },
                        contentType: "application/json",
                        dataType: 'json'
                    });
                }

                function primeForSelfDestruct() {
                    $.ajax({
                        type: 'POST',
                        url: '/prime',
                        data: JSON.stringify({
                            page: "{{ .Page }}"
                        }),
                        success: function(data) {
                            $('#saveEditButton').removeClass()
                            if (data.success == true) {
                                $('#saveEditButton').addClass("success");
                            } else {
                                $('#saveEditButton').addClass("failure");
                            }
                            $('#saveEditButton').text(data.message);
                        },
                        error: function(xhr, error) {
                            $('#saveEditButton').removeClass()
                            $('#saveEditButton').addClass("failure");
                            $('#saveEditButton').text(error);
                        },
                        contentType: "application/json",
                        dataType: 'json'
                    });
                }

                function lockPage(passphrase) {
                    $.ajax({
                        type: 'POST',
                        url: '/lock',
                        data: JSON.stringify({
                            page: "{{ .Page }}",
                            passphrase: passphrase
                        }),
                        success: function(data) {
                            $('#saveEditButton').removeClass()
                            if (data.success == true) {
                                $('#saveEditButton').addClass("success");
                            } else {
                                $('#saveEditButton').addClass("failure");
                            }
                            $('#saveEditButton').text(data.message);
                            if (data.success == true && $('#lockPage').text() == "Lock") {               
                                window.location = "/{{ .Page }}/view";
                            } 
                            if (data.success == true && $('#lockPage').text() == "Unlock") {               
                                window.location = "/{{ .Page }}/edit";
                            } 
                        },
                        error: function(xhr, error) {
                            $('#saveEditButton').removeClass()
                            $('#saveEditButton').addClass("failure");
                            $('#saveEditButton').text(error);
                        },
                        contentType: "application/json",
                        dataType: 'json'
                    });
                }

                function encryptPage(passphrase) {
                    $.ajax({
                        type: 'POST',
                        url: '/encrypt',
                        data: JSON.stringify({
                            page: "{{ .Page }}",
                            passphrase: passphrase
                        }),
                        success: function(data) {
                            $('#saveEditButton').removeClass()
                            if (data.success == true) {
                                $('#saveEditButton').addClass("success");
                            } else {
                                $('#saveEditButton').addClass("failure");
                            }
                            $('#saveEditButton').text(data.message);
                            if (data.success == true && $('#encryptPage').text() == "Encrypt") {               
                                window.location = "/{{ .Page }}/view";
                            } 
                            if (data.success == true && $('#encryptPage').text() == "Decrypt") {               
                                window.location = "/{{ .Page }}/edit";
                            } 
                        },
                        error: function(xhr, error) {
                            $('#saveEditButton').removeClass()
                            $('#saveEditButton').addClass("failure");
                            $('#saveEditButton').text(error);
                        },
                        contentType: "application/json",
                        dataType: 'json'
                    });
                }

                function clearOld() {
                    $.ajax({
                        type: 'DELETE',
                        url: '/oldlist',
                        data: JSON.stringify({
                            page: "{{ .Page }}"
                        }),
                        success: function(data) {
                            $('#saveEditButton').removeClass()
                            if (data.success == true) {
                                $('#saveEditButton').addClass("success");
                            } else {
                                $('#saveEditButton').addClass("failure");
                            }
                            $('#saveEditButton').text(data.message);
                            if (data.success == true) {               
                                window.location = "/{{ .Page }}/list";
                            } 
                        },
                        error: function(xhr, error) {
                            $('#saveEditButton').removeClass();
                            $('#saveEditButton').addClass("failure");
                            $('#saveEditButton').text(error);
                        },
                        contentType: "application/json",
                        dataType: 'json'
                    });
                }


                $("#encryptPage").click(function(e) {
                    e.preventDefault();
                    var passphrase = prompt("Please enter a passphrase. Note: Encrypting will remove all previous history.", "");
                    if (passphrase != null) {
                        encryptPage(passphrase);
                    }
                });


                $("#erasePage").click(function(e) {
                    e.preventDefault();
                    var r = confirm("Are you sure you want to erase?");
                    if (r == true) {
                        window.location = "/{{ .Page }}/erase";
                    } else {
                        x = "You pressed Cancel!";
                    }
                });


                $("#selfDestructPage").click(function(e) {
                    e.preventDefault();
                    var r = confirm("This will erase the page the next time it is opened, are you sure you want to do that?");
                    if (r == true) {
                        primeForSelfDestruct();
                    } else {
                        x = "You pressed Cancel!";
                    }
                });


                $("#lockPage").click(function(e) {
                    e.preventDefault();
                    var passphrase = prompt("Please enter a passphrase to lock", "");
                    if (passphrase != null) {
                        if ($('#lockPage').text() == "Lock") {
                            $('#saveEditButton').removeClass();
                            $("#saveEditButton").text("Locking");                           
                        } else {
                            $('#saveEditButton').removeClass();
                            $("#saveEditButton").text("Unlocking");
                        }
                        lockPage(passphrase);
                        // POST encrypt page
                        // reload page
                    }
                });

                $("#clearOld").click(function(e) {
                    e.preventDefault();
                    var r = confirm("This will erase all cleared list items, are you sure you want to do that? (Versions will stay in history).");
                    if (r == true) {
                        clearOld()
                    } else {
                        x = "You pressed Cancel!";
                    }
                });

                $("textarea").keydown(function(e) {
                    if(e.keyCode === 9) { // tab was pressed
                        // get caret position/selection
                        var start = this.selectionStart;
                        var end = this.selectionEnd;

                        var $this = $(this);
                        var value = $this.val();

                        // set textarea value to: text before caret + tab + text after caret
                        $this.val(value.substring(0, start)
                                    + "\t"
                                    + value.substring(end));

                        // put caret at right position again (add one for the tab)
                        this.selectionStart = this.selectionEnd = start + 1;

                        // prevent the focus lose
                        e.preventDefault();
                    }
                });

                $('.deletable').click(function(event) {
                  event.preventDefault();
                  var lineNum = $(this).attr('id')
                    $.ajax({
                      url: "/listitem" + '?' + $.param({
                        "lineNum": lineNum,
                        "page": "{{ .Page }}"
                      }),
                      type: 'DELETE',
                      success: function() {
                        window.location.reload(true);
                      }
                    });
                });


            }); //]]>

        </script>
        <script>hljs.initHighlightingOnLoad();</script>

    </head>

    <body id="pad">
        <article class="markdown-body">
            <div class="pure-menu pure-menu-horizontal" id="menu">
                <ul class="pure-menu-list">
                    <li></li>
                    <!-- Required to keep them level? -->
                    <li class="pure-menu-item pure-menu-has-children pure-menu-allow-hover">
                        <a href="#" id="menuLink1" class="pure-menu-link">{{ .Page }}</a>
                        <ul class="pure-menu-children">
                            <li class="pure-menu-item"><a href="/" class="pure-menu-link">New</a></li>
                            <li class="pure-menu-item"><a href="https://github.com/schollz/cowyo" class="pure-menu-link">Source</a></li>
                            <hr>
                            {{ if (or (.IsLocked) (.IsEncrypted) )}}
                            {{ else }}
                            <li class="pure-menu-item"><a href="#" class="pure-menu-link" id="encryptPage">{{ if .IsEncrypted }}Decrypt{{ else }}Encrypt{{end}}</a></li>
                            <li class="pure-menu-item"><a href="#" class="pure-menu-link" id="lockPage">{{ if .IsLocked }}Unlock{{ else }}Lock{{end}}</a></li>
                            <li class="pure-menu-item"><a href="/{{ .Page }}/history" class="pure-menu-link">History</a></li>
                            <hr>
                            <li class="pure-menu-item"><a href="#" class="pure-menu-link" id="selfDestructPage">Self-destruct</a></li>
                            <li class="pure-menu-item"><a href="#" class="pure-menu-link" id="erasePage">Erase</a></li>
                            {{ end }}
                        </ul>
                    </li>
                    <!--
                    <li class="pure-menu-item  {{ with .ViewPage }}pure-menu-selected{{ end }}">
                    <a href="/{{ .Page }}/view" class="pure-menu-link">View</a>
                    </li>-->

                    <li class="pure-menu-item pure-menu-has-children pure-menu-allow-hover  {{ with .ViewPage }}pure-menu-selected{{ end }}">
                        <a href="#" id="menuLink1" class="pure-menu-link">View</a>
                        <ul class="pure-menu-children">
                        <li class="pure-menu-item">
                    <a href="/{{ .Page }}/view" class="pure-menu-link">Current</a>                      
                        </li>
                        {{ range .RecentlyEdited}}
                            <li class="pure-menu-item"><a  class="pure-menu-link" href="/{{.}}/view/">{{.}}</a></li>
                        {{ end }}
                        </ul>
                    </li>

                    {{ if (or (.IsLocked) (.IsEncrypted) )}}
                    {{ if .IsLocked }}
                    <li class="pure-menu-item"><a href="#" class="pure-menu-link" id="lockPage">{{ if .IsLocked }}Unlock{{ else }}Lock{{end}}</a></li>
                    <li class="pure-menu-item" class="pure-menu-link"><a href="#"><span id="saveEditButton"></span></a></li>
                    {{ else }}
                    <li class="pure-menu-item"><a href="#" class="pure-menu-link" id="encryptPage">{{ if .IsEncrypted }}Decrypt{{ else }}Encrypt{{end}}</a></li>
                    <li class="pure-menu-item" class="pure-menu-link"><a href="#"><span id="saveEditButton"></span></a></li>
                    {{ end }}
                    {{else}}
                    {{ if .ListPage }}
                    <li class="pure-menu-item {{ with .ListPage }}pure-menu-selected{{ end }}"><a href="#" class="pure-menu-link" id="clearOld">Clear done</a></li>
                    {{ else }}
                    <li class="pure-menu-item {{ with .ListPage }}pure-menu-selected{{ end }}"><a href="/{{ .Page }}/list" class="pure-menu-link">List</a></li>
                    {{ end }}
                    <li class="pure-menu-item {{ with .EditPage }}pure-menu-selected{{ end }}"><a href="/{{ .Page }}/edit" class="pure-menu-link"><span id="saveEditButton">Edit</span></a></li>
                    {{end}}

                


                </ul>
            </div>


            <div id="wrap">
                {{ if .EditPage }} <div id="pad"><textarea autofocus placeholder="Start typing, it will save automatically.

Use Markdown for formatting and links (also make links like [[this]])." id="userInput">{{ .RawPage }}</textarea></div>{{ end }}
<div id="rendered"> 
                {{ if .DontKnowPage }} <strong><center>{{ .Route }} not understood!</center></strong>{{ end }}
                {{ if .ViewPage }}{{ .RenderedPage }}{{ end }}
            {{ if .HistoryPage }}
                <h1>History</h1>
                <ul>
                {{range $i, $e := .Versions}}
                    <li style="list-style: none;">
                    <a href="/{{ $.Page }}/view?version={{$e}}">View</a>&nbsp;&nbsp;<a href="/{{ $.Page }}/list?version={{$e}}">List</a>&nbsp;&nbsp;<a href="/{{ $.Page }}/raw?version={{$e}}">Raw</a>&nbsp;&nbsp;
                    {{index $.VersionsText $i}}&nbsp;({{if lt (index $.VersionsChangeSums $i) 0}}<span style="color:red">{{else}}<span style="color:green">+{{end}}{{index $.VersionsChangeSums $i}}</span>)</li>
                {{end}}
                </ul>
            {{ end }}
            {{ if .ListPage }}
                  {{ range $index, $element := .ListItems }}
                    {{ $element }}
                  {{ end }}
            {{ end }}

            {{ if .DirectoryPage }}
                <table style="width:100%">
                  <tr>
                    <th>Document</th>
                    <th>Current size</th> 
                    <th>Num Edits</th> 
                    <th>Last Edited</th> 
                  </tr>
                  {{range $i, $e := .FileNames}}
                  <tr>
                    <td><a href="/{{ $e }}/view">{{ $e }}</a></td>
                    <td>{{index $.FileSizes $i}}</td> 
                    <td>{{index $.FileNumChanges $i}}</td> 
                    <td>{{index $.FileLastEdited $i}}</td> 
                  </tr>
                  {{ end }}
                </table>
            {{end}}
</div> 
            </div>
        </article>





    </body>

</html>
